//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using Orleans;
using Orleans.Concurrency;
using Devlooped.CloudActors;

namespace {{ Namespace }}
{
    [GeneratedCode("Devlooped.CloudActors", "{{ Version }}")]
    [CompilerGenerated]
    public partial class {{ Name }}Grain : Grain<{{ Name }}>, IActorGrain
    {
        [ReadOnly]
        public {{ QueryAsync ? "async " : "" }}Task<TResult> QueryAsync<TResult>(IActorQuery<TResult> command)
        {
            switch (command)
            {
                {{~ for query in Queries ~}}
                case {{ query.Type }} query:
                    {{~ if query.IsAsync ~}}
                    return (TResult)(object)await State.{{ query.Name }}(query)));
                    {{~ else if QueryAsync ~}}
                    return (TResult)(object)State.{{ query.Name }}(query);
                    {{~ else ~}}
                    return Task.FromResult((TResult)(object)State.{{ query.Name }}(query));
                    {{~ end ~}}
                {{~ end ~}}
                default:
                    throw new NotSupportedException();
            }
        }

        public {{ ExecuteAsync ? "async " : "" }}Task<TResult> ExecuteAsync<TResult>(IActorCommand<TResult> command)
        {
            switch (command)
            {
                {{~ for command in Commands ~}}
                case {{ command.Type }} cmd:
                    {{~ if command.IsAsync ~}}
                    var result = await State.{{ command.Name }}(cmd);
                    {{~ else ~}}
                    var result = State.{{ command.Name }}(cmd);
                    {{~ end ~}}
                    await base.WriteStateAsync();
                    return (TResult)(object)result;
                {{~ end ~}}
                default:
                    throw new NotSupportedException();
            }
        }

        public {{ ExecuteVoidAsync ? "async " : "" }}Task ExecuteAsync(IActorCommand command)
        {
            switch (command)
            {
                {{~ for command in VoidCommands ~}}
                case {{ command.Type }} cmd:
                    {{~ if command.IsAsync ~}}
                    await State.{{ command.Name }}(cmd);
                    {{~ else ~}}
                    State.{{ command.Name }}(cmd);
                    {{~ end ~}}
                    await base.WriteStateAsync();
                    break;
                {{~ end ~}}
                default:
                    throw new NotSupportedException();
            }
        }
    }
}